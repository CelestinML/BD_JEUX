SQL> 
SQL> @creation_tables.sql
SQL> REM CREATION DES TABLES
SQL> 
SQL> CREATE TABLE JOUEUR(
  2  	NoJoueur						INTEGER			NOT NULL,
  3  	Courriel						VARCHAR2(256)	NOT NULL,
  4  	Surnom							VARCHAR2(50)	NOT NULL,
  5  	Miniature						BLOB,
  6  	Nom								VARCHAR2(100),
  7  	Prenom							VARCHAR2(100),
  8  	Actif							CHAR(1)
  9  );

Table JOUEUR créé(e).

SQL> 
SQL> CREATE TABLE ESRB(
  2  	Code							CHAR(1)			NOT NULL,
  3  	Description						VARCHAR2(50)	NOT NULL
  4  );

Table ESRB créé(e).

SQL> 
SQL> CREATE TABLE GENRE(
  2  	Code							CHAR(3)			NOT NULL,
  3  	Description						VARCHAR2(50)	NOT NULL,
  4  	CodeGenreParent					CHAR(3)			NOT NULL
  5  );

Table GENRE créé(e).

SQL> 
SQL> CREATE TABLE SOUS_GENRE_JEU(
  2  	CodeSousGenre					CHAR(3)			NOT NULL,
  3  	IdJeu							INTEGER			NOT NULL
  4  );

Table SOUS_GENRE_JEU créé(e).

SQL> 
SQL> CREATE TABLE JEU(
  2  	IdJeu							INTEGER			NOT NULL,
  3  	Nom								VARCHAR2(100)	NOT NULL,
  4  	Description						VARCHAR2(256)	NOT NULL,
  5  	CodeESRB						CHAR(1),
  6  	CodeGenre						CHAR(3)
  7  );

Table JEU créé(e).

SQL> 
SQL> CREATE TABLE CONTENU(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	Nom								VARCHAR2(100)	NOT NULL,
  4  	Description						VARCHAR2(256)	NOT NULL,
  5  	DateSortie						DATE,
  6  	TypeContenu						VARCHAR2(1)		NOT NULL,
  7  	IdJeu							INTEGER			NOT NULL	
  8  );

Table CONTENU créé(e).

SQL> 
SQL> CREATE TABLE CONTENU_POSSEDE(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL
  4  );

Table CONTENU_POSSEDE créé(e).

SQL> 
SQL> CREATE TABLE SUCCES(
  2  	IdSucces						INTEGER			NOT NULL,
  3  	Titre							VARCHAR2(50)	NOT NULL,
  4  	Description						VARCHAR2(256),
  5  	Image							BLOB,
  6  	Valeur							NUMBER(3,0),
  7  	IdContenu						INTEGER			NOT NULL	
  8  );

Table SUCCES créé(e).

SQL> 
SQL> CREATE TABLE SUCCES_CALCULE(
  2  	IdSucces						INTEGER			NOT NULL,
  3  	MaximumRequis					NUMBER(3,0)		NOT NULL
  4  );

Table SUCCES_CALCULE créé(e).

SQL> 
SQL> CREATE TABLE SUCCES_REALISE(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	IdSucces						INTEGER			NOT NULL
  5  );

Table SUCCES_REALISE créé(e).

SQL> 
SQL> CREATE TABLE SUCCES_EN_COURS(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	IdSucces						INTEGER			NOT NULL,
  5  	Compteur						NUMBER(3,0)		NOT NULL
  6  );

Table SUCCES_EN_COURS créé(e).

SQL> 
SQL> 
SQL> CREATE TABLE FORFAIT(
  2  	Code							CHAR(5)			NOT NULL,
  3  	Nom								VARCHAR2(100),
  4  	Description						VARCHAR2(1000)
  5  );

Table FORFAIT créé(e).

SQL> 
SQL> CREATE TABLE PERIODE(
  2  	IdPeriode						INTEGER			NOT NULL,
  3  	DateDebut						DATE			NOT NULL,
  4  	DateFin							DATE			NOT NULL,
  5  	Prix							NUMBER (6,2)	NOT NULL,
  6  	CodeForfait						CHAR(5)			NOT NULL
  7  );

Table PERIODE créé(e).

SQL> 
SQL> CREATE TABLE PERIODE_FORFAIT_JOUEUR(
  2  	IdPeriode						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	DateAchat						DATE			NOT NULL
  5  );

Table PERIODE_FORFAIT_JOUEUR créé(e).

SQL> 
SQL> CREATE TABLE RESEAU(
  2  	Code							CHAR(6)			NOT NULL,
  3  	Nom								VARCHAR2(50)	NOT NULL,
  4  	Description						VARCHAR2(100)	NOT NULL,
  5  	Actif							VARCHAR2(1)		NOT NULL
  6  );

Table RESEAU créé(e).

SQL> 
SQL> CREATE TABLE ABONNEMENT_RESEAU(
  2  	CodeReseau						CHAR(6)			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL
  4  );

Table ABONNEMENT_RESEAU créé(e).

SQL> 
SQL> CREATE TABLE SUIVI_RESEAU(
  2  	IdSuivi							INTEGER			NOT NULL,
  3  	Moment							TIMESTAMP		NOT NULL,
  4  	CodeReseau						CHAR(6)			NOT NULL,
  5  	DateSuivi						DATE			NOT NULL,
  6  	Action							CHAR(3)			NOT NULL,
  7  	NoJoueur						INTEGER
  8  );

Table SUIVI_RESEAU créé(e).

SQL> 
SQL> CREATE TABLE AMI(
  2  	NoJoueurInvitant				INTEGER			NOT NULL,	
  3  	NoJoueurInvite					INTEGER			NOT NULL,	
  4  	DateDebut						DATE,
  5  	CodeStatut						CHAR(3)			NOT NULL	
  6  );

Table AMI créé(e).

SQL> 
SQL> CREATE TABLE STATUT_AMITIE(
  2  	CodeStatut						CHAR(3)			NOT NULL,
  3  	Description						VARCHAR2(25)	NOT NULL	
  4  );

Table STATUT_AMITIE créé(e).

SQL> 
SQL> CREATE TABLE SUIVI_AMITIE(
  2  	IdSuivi							INTEGER			NOT NULL,
  3  	Moment							TIMESTAMP		NOT NULL,
  4  	NoJoueurInvitant				INTEGER			NOT NULL,	
  5  	NoJoueurInvite					INTEGER			NOT NULL,	
  6  	DateSuivi						DATE			NOT NULL,
  7  	CodeStatut						CHAR(3)			NOT NULL
  8  );

Table SUIVI_AMITIE créé(e).

SQL> @creation_contraintes.sql
SQL> REM CLÉS PRIMAIRES (PK)
SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT JOUEUR_PK
  3  	PRIMARY KEY (NoJoueur)	
  4  	USING INDEX;

Table JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE ESRB
  2  	ADD CONSTRAINT ESRB_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table ESRB modifié(e).

SQL> 
SQL> ALTER TABLE GENRE
  2  	ADD CONSTRAINT GENRE_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table GENRE modifié(e).

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_PK
  3  	PRIMARY KEY (CodeSousGenre, IdJeu)	
  4  	USING INDEX;

Table SOUS_GENRE_JEU modifié(e).

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_PK
  3  	PRIMARY KEY (IdJeu)	
  4  	USING INDEX;

Table JEU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CONTENU_PK
  3  	PRIMARY KEY (IdContenu)	
  4  	USING INDEX;

Table CONTENU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur)	
  4  	USING INDEX;

Table CONTENU_POSSEDE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT SUCCES_PK
  3  	PRIMARY KEY (IdSucces)	
  4  	USING INDEX;

Table SUCCES modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT SUCCES_CALCULE_PK
  3  	PRIMARY KEY (IdSucces)	
  4  	USING INDEX;

Table SUCCES_CALCULE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur, IdSucces)	
  4  	USING INDEX;

Table SUCCES_REALISE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur, IdSucces)	
  4  	USING INDEX;

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE FORFAIT
  2  	ADD CONSTRAINT FORFAIT_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table FORFAIT modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT PERIODE_PK
  3  	PRIMARY KEY (IdPeriode)	
  4  	USING INDEX;

Table PERIODE modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORFAIT_JOUEUR_PK
  3  	PRIMARY KEY (IdPeriode, NoJoueur)
  4  	USING INDEX;

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2  	ADD CONSTRAINT RESEAU_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_RESEAU_PK
  3  	PRIMARY KEY (CodeReseau, NoJoueur)	
  4  	USING INDEX;

Table ABONNEMENT_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_PK
  3  	PRIMARY KEY (IdSuivi)	
  4  	USING INDEX;

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_PK
  3  	PRIMARY KEY (NoJoueurInvitant, NoJoueurInvite)	
  4  	USING INDEX;

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE STATUT_AMITIE
  2  	ADD CONSTRAINT STATUT_AMITIE_PK
  3  	PRIMARY KEY (CodeStatut)	
  4  	USING INDEX;

Table STATUT_AMITIE modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMITIE_PK
  3  	PRIMARY KEY (IdSuivi)	
  4  	USING INDEX;

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> 
SQL> REM CLÉS ÉTRANGÈRES (FK)
SQL> 
SQL> ALTER TABLE GENRE
  2  	ADD CONSTRAINT GENRE_FK
  3  	FOREIGN KEY (CodeGenreParent)
  4  	REFERENCES GENRE (Code);

Table GENRE modifié(e).

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_SOUS_GENRE_FK
  3  	FOREIGN KEY (CodeSousGenre)
  4  	REFERENCES GENRE (Code);

Table SOUS_GENRE_JEU modifié(e).

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_ID_JEU_FK
  3  	FOREIGN KEY (IdJeu)
  4  	REFERENCES JEU (IdJeu);

Table SOUS_GENRE_JEU modifié(e).

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_CODE_ESRB_FK
  3  	FOREIGN KEY (CodeESRB)
  4  	REFERENCES ESRB (Code);

Table JEU modifié(e).

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_CODE_GENRE_FK
  3  	FOREIGN KEY (CodeGenre)
  4  	REFERENCES GENRE (Code);

Table JEU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CONTENU_FK
  3  	FOREIGN KEY (IdJeu)
  4  	REFERENCES JEU (IdJeu);

Table CONTENU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_ID_CONTENU_FK
  3  	FOREIGN KEY (IdContenu)
  4  	REFERENCES Contenu (IdContenu);

Table CONTENU_POSSEDE modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES Joueur (NoJoueur);

Table CONTENU_POSSEDE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT SUCCES_FK
  3  	FOREIGN KEY (IdContenu)
  4  	REFERENCES CONTENU (IdContenu);

Table SUCCES modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT SUCCES_CALCULE_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES (IdSucces);

Table SUCCES_CALCULE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_ID_SUCCES_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES (IdSucces);

Table SUCCES_REALISE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_CONTENU_FK
  3  	FOREIGN KEY (IdContenu, NoJoueur)
  4  	REFERENCES CONTENU_POSSEDE (IdContenu, NoJoueur);

Table SUCCES_REALISE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_ID_SUCCES_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES_CALCULE (IdSucces);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_CONTENU_FK
  3  	FOREIGN KEY (IdContenu, NoJoueur)
  4  	REFERENCES CONTENU_POSSEDE (IdContenu, NoJoueur);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT PERIODE_FK
  3  	FOREIGN KEY (CodeForfait)
  4  	REFERENCES FORFAIT (Code);

Table PERIODE modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORF_J_ID_PERIODE_FK
  3  	FOREIGN KEY (IdPeriode)
  4  	REFERENCES PERIODE (IdPeriode);

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORF_J_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_CODE_RESEAU_FK
  3  	FOREIGN KEY (CodeReseau)
  4  	REFERENCES RESEAU (Code);

Table ABONNEMENT_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table ABONNEMENT_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_CODE_RESEAU_FK
  3  	FOREIGN KEY (CodeReseau)
  4  	REFERENCES RESEAU (Code);

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE AMI 
  2  	ADD CONSTRAINT AMI_CODE_STATUT_FK
  3  	FOREIGN KEY (CodeStatut)
  4  	REFERENCES STATUT_AMITIE (CodeStatut);

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_NO_JOUEUR_INVITANT_FK
  3  	FOREIGN KEY (NoJoueurInvitant)
  4  	REFERENCES JOUEUR (NoJoueur);

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_NO_JOUEUR_INVITE_FK
  3  	FOREIGN KEY (NoJoueurInvite)
  4  	REFERENCES JOUEUR (NoJoueur);

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMI_NO_J_INVITANT_FK
  3  	FOREIGN KEY (NoJoueurInvitant)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMI_NO_J_INVITE_FK
  3  	FOREIGN KEY (NoJoueurInvite)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMITIE_CODE_STATUT_FK
  3  	FOREIGN KEY (CodeStatut)
  4  	REFERENCES STATUT_AMITIE (CodeStatut);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> 
SQL> REM Champs UNIQUE
SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT JOUEUR_UNIQUE UNIQUE (Courriel, Surnom);

Table JOUEUR modifié(e).

SQL> 
SQL> 
SQL> REM Listes des constraintes (CHECK CONSTRAINT)
SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CHECK_CONTENU_TYPE CHECK (
  3  		TypeContenu IN ('J', 'D', 'O')
  4  	);

Table CONTENU modifié(e).

SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT CHECK_JOUEUR_ACTIF CHECK (
  3  		Actif IN ('1', '0')
  4  	);

Table JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2  	ADD CONSTRAINT CHECK_RESEAU_ACTIF CHECK (
  3  		Actif IN ('1', '0')
  4  	);

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT CHECK_SUIVI_RESEAU_ACTION CHECK (
  3  		Action IN ('CRE', 'SUP', 'ACT', 'DES', 'ABO', 'DSA')
  4  	);

Table SUIVI_RESEAU modifié(e).

SQL> REM 'CREATION RESEAU', 'SUPPRESSION RESEAU', 
SQL> REM 'ACTIVATION RESEAU', 'DESACTIVATION RESEAU', 
SQL> REM 'ABONNEMENT JOUEUR', 'DESABONNEMENT JOUEUR'
SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT CHECK_SUCCES_VALEUR CHECK (Valeur > 0);

Table SUCCES modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT CHECK_SUCCES_C_MAX_REQUIS CHECK (MaximumRequis > 0);

Table SUCCES_CALCULE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT CHECK_SUCCES_EN_COURS_COMPTEUR CHECK (Compteur > 0);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT CHECK_PERIODE_PRIX CHECK (Prix >= 0);

Table PERIODE modifié(e).

SQL> 
SQL> 
SQL> REM Valeurs par défaut
SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2    MODIFY (Compteur DEFAULT 0);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2    MODIFY (DateAchat DEFAULT SysDate);

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE JOUEUR
  2    MODIFY (Actif DEFAULT '1');

Table JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2    MODIFY (Actif DEFAULT '1');

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2    MODIFY (Actif DEFAULT '1');

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2    MODIFY (Moment DEFAULT CURRENT_TIMESTAMP);

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2    MODIFY (Moment DEFAULT CURRENT_TIMESTAMP);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> 
SQL> REM Séquences
SQL> 
SQL> CREATE SEQUENCE JEU_SEQ;

Sequence JEU_SEQ créé(e).

SQL> CREATE SEQUENCE CONTENU_SEQ;

Sequence CONTENU_SEQ créé(e).

SQL> CREATE SEQUENCE SUCCES_SEQ;

Sequence SUCCES_SEQ créé(e).

SQL> CREATE SEQUENCE PERIODE_SEQ;

Sequence PERIODE_SEQ créé(e).

SQL> CREATE SEQUENCE JOUEUR_SEQ;

Sequence JOUEUR_SEQ créé(e).

SQL> CREATE SEQUENCE SUIVI_AMITIE_SEQ;

Sequence SUIVI_AMITIE_SEQ créé(e).

SQL> CREATE SEQUENCE SUIVI_RESEAU_SEQ;

Sequence SUIVI_RESEAU_SEQ créé(e).

SQL> @creation_scripts.sql
SQL> REM CREATION DES SCRIPTS
SQL> 
SQL> @scripts/creation_declencheurs.sql
SQL> --------------------------------------------------------
SQL> --  Fichier créé - lundi-octobre-07-2019   
SQL> --------------------------------------------------------
SQL> --------------------------------------------------------
SQL> --  DDL for Trigger NO_AUTO_IDCONTENU
SQL> --------------------------------------------------------
SQL> ALTER SESSION SET PLSCOPE_SETTINGS = 'IDENTIFIERS:NONE';

Session modifié(e).

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL>   CREATE OR REPLACE TRIGGER "NO_AUTO_IDCONTENU" 
  2     before insert 
  3     on "CONTENU"  
  4     for each row 
  5  begin  
  6        select CONTENU_SEQ.nextval 
  7        into :NEW."IDCONTENU" 
  8        from SYS.dual; 
  9  end;
 10  /

Elément Trigger NO_AUTO_IDCONTENU compilé

SQL> ALTER TRIGGER   "NO_AUTO_IDCONTENU"ENABLE;

Trigger "NO_AUTO_IDCONTENU" modifié(e).

SQL> --------------------------------------------------------
SQL> --  DDL for Trigger NO_AUTO_IDJEU
SQL> --------------------------------------------------------
SQL> 
SQL>   CREATE OR REPLACE TRIGGER "NO_AUTO_IDJEU" 
  2     before insert on "JEU" 
  3     for each row 
  4  begin  
  5      select JEU_SEQ.nextval 
  6      into :NEW."IDJEU" 
  7      from dual; 
  8  end;
  9  /

Elément Trigger NO_AUTO_IDJEU compilé

SQL> ALTER TRIGGER "NO_AUTO_IDJEU" ENABLE;

Trigger "NO_AUTO_IDJEU" modifié(e).

SQL> --------------------------------------------------------
SQL> --  DDL for Trigger NO_AUTO_IDPERIODE
SQL> --------------------------------------------------------
SQL> 
SQL>   CREATE OR REPLACE TRIGGER "NO_AUTO_IDPERIODE" 
  2     before insert on "PERIODE" 
  3     for each row 
  4  begin  
  5      select PERIODE_SEQ.nextval 
  6      into :NEW."IDPERIODE" 
  7      from dual; 
  8  end;
  9  /

Elément Trigger NO_AUTO_IDPERIODE compilé

SQL> ALTER TRIGGER "NO_AUTO_IDPERIODE" ENABLE;

Trigger "NO_AUTO_IDPERIODE" modifié(e).

SQL> --------------------------------------------------------
SQL> --  DDL for Trigger NO_AUTO_IDSUCCES
SQL> --------------------------------------------------------
SQL> 
SQL>   CREATE OR REPLACE TRIGGER "NO_AUTO_IDSUCCES" 
  2     before insert on "SUCCES" 
  3     for each row 
  4  begin  
  5       select SUCCES_SEQ.nextval 
  6       into :NEW."IDSUCCES" 
  7       from dual; 
  8  end;
  9  /

Elément Trigger NO_AUTO_IDSUCCES compilé

SQL> ALTER TRIGGER "NO_AUTO_IDSUCCES" ENABLE;

Trigger "NO_AUTO_IDSUCCES" modifié(e).

SQL> --------------------------------------------------------
SQL> --  DDL for Trigger NO_AUTO_IDSUIVI
SQL> --------------------------------------------------------
SQL> 
SQL>   CREATE OR REPLACE TRIGGER "NO_AUTO_IDSUIVI" 
  2     before insert on "SUIVI_AMITIE" 
  3     for each row 
  4  begin  
  5      select SUIVI_AMITIE_SEQ.nextval 
  6      into :NEW."IDSUIVI" 
  7      from dual; 
  8  end;
  9  /

Elément Trigger NO_AUTO_IDSUIVI compilé

SQL> ALTER TRIGGER "NO_AUTO_IDSUIVI" ENABLE;

Trigger "NO_AUTO_IDSUIVI" modifié(e).

SQL> --------------------------------------------------------
SQL> --  DDL for Trigger NO_AUTO_IDSUIVIR
SQL> --------------------------------------------------------
SQL> 
SQL>   CREATE OR REPLACE TRIGGER "NO_AUTO_IDSUIVIR" 
  2     before insert on "SUIVI_RESEAU" 
  3     for each row 
  4  begin 
  5      select SUIVI_RESEAU_SEQ.nextval 
  6      into :NEW."IDSUIVI" 
  7      from dual; 
  8  end;
  9  /

Elément Trigger NO_AUTO_IDSUIVIR compilé

SQL> ALTER TRIGGER "NO_AUTO_IDSUIVIR" ENABLE;

Trigger "NO_AUTO_IDSUIVIR" modifié(e).

SQL> --------------------------------------------------------
SQL> --  DDL for Trigger NO_AUTO_NOJOUEUR
SQL> --------------------------------------------------------
SQL> 
SQL>   CREATE OR REPLACE TRIGGER "NO_AUTO_NOJOUEUR" 
  2     before insert on "JOUEUR" 
  3     for each row 
  4  begin  
  5       select JOUEUR_SEQ.nextval 
  6       into :NEW."NOJOUEUR" 
  7       from dual; 
  8  end;
  9  /

Elément Trigger NO_AUTO_NOJOUEUR compilé

SQL> ALTER TRIGGER "NO_AUTO_NOJOUEUR" ENABLE;

Trigger "NO_AUTO_NOJOUEUR" modifié(e).

SQL> 
SQL> REM CREATION DES TRIGGERS
SQL> 
SQL> @declencheurs/sequences.sql

Erreur commençant à la ligne: 111 Fichier @ C:\Users\pinot\BD_JEUX\scripts\creation_declencheurs.sql
Dans la commande -
@declencheurs/sequences.sql
Rapport d'erreur -
SP2-0310 : impossible d'ouvrir le fichier : "declencheurs/sequences.sql"
SQL> 
SQL> @declencheurs/nouveauSuccesEnCours.sql 
SQL> CREATE OR REPLACE TRIGGER NOUVEAUSUCCESENCOURS_TRG 
  2      BEFORE INSERT 
  3      ON SUCCES_EN_COURS 
  4      FOR EACH ROW
  5  BEGIN
  6      --On verifie si le succes en court d'insertion a ete realise par ce joueur dans ce jeu
  7     IF (:NEW.IDSUCCES IN (SELECT IDSUCCES FROM SUCCES_REALISE WHERE NOJOUEUR = :NEW.NOJOUEUR AND IDCONTENU = :NEW.IDCONTENU)) THEN
  8      raise_application_error(-20000, 'Succes deja realise.');
  9     END IF;
 10      --Si le succès n'est pas dans les succes deja realises par ce joueur dans ce jeu, rien ne se passe et l'insertion se termine correctement
 11  END;

Elément Trigger NOUVEAUSUCCESENCOURS_TRG compilé

LINE/COL  ERROR
--------- -------------------------------------------------------------
3/4       PL/SQL: Statement ignored
3/25      PLS-00405: subquery not allowed in this context
Erreurs : consulter le journal du compilateur
SQL> @declencheurs/genre.sql 
SQL> CREATE OR REPLACE TRIGGER Genre_TRG
  2      AFTER UPDATE
  3      ON JEU
  4      FOR EACH ROW
  5  BEGIN
  6      if :OLD.CODEGENRE <> :NEW.CODEGENRE then
  7      delete from sous_genre_jeu where idjeu = :NEW.idjeu;
  8      end if;
  9  
 10  END;

Elément Trigger GENRE_TRG compilé

SQL> @declencheurs/suiviReseau.sql 
SQL> CREATE OR REPLACE TRIGGER Suivi_Reseau_TRG
  2      AFTER INSERT OR UPDATE
  3      ON RESEAU
  4      FOR EACH ROW
  5  BEGIN
  6      IF INSERTING THEN
  7          INSERT INTO SUIVI_RESEAU(CODERESEAU, DATESUIVI, ACTION)
  8          VALUES(:NEW.CODE, SYSDATE(), 'CRE');
  9      ELSIF UPDATING THEN
 10          IF (:NEW.ACTIF = '1') THEN
 11              INSERT INTO SUIVI_RESEAU(CODERESEAU, DATESUIVI, ACTION)
 12              VALUES(:NEW.CODE, SYSDATE(), 'ACT');
 13          ELSE
 14              INSERT INTO SUIVI_RESEAU(CODERESEAU, DATESUIVI, ACTION)
 15              VALUES(:NEW.CODE, SYSDATE(), 'DES');
 16          END IF;
 17      END IF;
 18  END;

Elément Trigger SUIVI_RESEAU_TRG compilé

SQL> @declencheurs/suiviAbonnementReseau.sql
SQL> CREATE OR REPLACE TRIGGER Suivi_Abonnement_Reseau_TRG
  2      AFTER INSERT OR DELETE
  3      ON ABONNEMENT_RESEAU
  4      FOR EACH ROW
  5  BEGIN
  6      IF INSERTING THEN
  7          INSERT INTO SUIVI_RESEAU(CODERESEAU, DATESUIVI, ACTION, NOJOUEUR)
  8          VALUES(:NEW.CODERESEAU, SYSDATE(), 'ABO', :NEW.NOJOUEUR);
  9      ELSIF DELETING THEN
 10          INSERT INTO SUIVI_RESEAU(CODERESEAU, DATESUIVI, ACTION, NOJOUEUR)
 11          VALUES(:OLD.CODERESEAU, SYSDATE(), 'DSA', :OLD.NOJOUEUR);
 12      END IF;
 13  END;

Elément Trigger SUIVI_ABONNEMENT_RESEAU_TRG compilé

SQL> @declencheurs/suiviAmi.sql
SQL> CREATE OR REPLACE TRIGGER Suivi_Ami_TRG
  2      AFTER INSERT OR DELETE OR UPDATE
  3      ON AMI
  4      FOR EACH ROW
  5  BEGIN
  6      IF INSERTING OR UPDATING THEN
  7          INSERT INTO SUIVI_AMITIE(NOJOUEURINVITANT, NOJOUEURINVITE, DATESUIVI, CODESTATUT)
  8          VALUES(:NEW.NOJOUEURINVITANT, :NEW.NOJOUEURINVITE, SYSDATE(), :NEW.CODESTATUT);
  9      ELSIF DELETING THEN
 10          INSERT INTO SUIVI_AMITIE(NOJOUEURINVITANT, NOJOUEURINVITE, DATESUIVI, CODESTATUT)
 11          VALUES(:OLD.NOJOUEURINVITANT, :OLD.NOJOUEURINVITE, SYSDATE(), :OLD.CODESTATUT);
 12      END IF;
 13  END;

Elément Trigger SUIVI_AMI_TRG compilé

SQL> @scripts/creation_procedures.sql
SQL> REM CREATION DES PROCEDURES
SQL> 
SQL> @procedures/ajoutForfait.sql
SQL> CREATE OR REPLACE PROCEDURE AJOUTFORFAIT(code IN CHAR, nom IN VARCHAR2, desc_param IN VARCHAR2, prix IN NUMBER) AS 
  2      
  3      bon_nom FORFAIT.NOM%TYPE;
  4  
  5  BEGIN
  6  
  7      IF nom IS NULL THEN
  8          bon_nom := 'Forfait';
  9      ELSE
 10          bon_nom := nom;
 11      END IF;
 12      INSERT INTO FORFAIT VALUES(code, bon_nom, desc_param);
 13      INSERT INTO PERIODE(DATEDEBUT, DATEFIN, PRIX, CODEFORFAIT) VALUES(SYSDATE(), ADD_MONTHS(SYSDATE(), 12), prix, code);
 14  
 15  END AJOUTFORFAIT;

Elément Procedure AJOUTFORFAIT compilé

SQL> @procedures/prolongationForfait.sql
SQL> CREATE OR REPLACE PROCEDURE PROLONGATIONFORFAIT(CODE IN CHAR, NBTOUCHES OUT INT) AS 
  2  BEGIN
  3      NBTOUCHES := 0;
  4      update PERIODE_FORFAIT_JOUEUR 
  5      set DATEACHAT = ADD_MONTHS(DATEACHAT,2)-- Ajout de deux mois à la date de fin de forfait
  6      where IDPERIODE IN (SELECT IDPERIODE FROM PERIODE WHERE CODEFORFAIT = CODE) 
  7      and  dateachat >= add_months(sysdate,-12);
  8      IF SQL%FOUND THEN
  9          NBTOUCHES := SQL%ROWCOUNT;
 10      END IF;
 11  END PROLONGATIONFORFAIT;

Elément Procedure PROLONGATIONFORFAIT compilé

SQL> @procedures/ajusterPromotion.sql
SQL> create or replace PROCEDURE AJUSTERPROMOTION(code OUT char, nouveau_prix OUT INT) AS
  2  
  3      reseau_le_pop char(6);
  4      periode_plus_utilise char(5);
  5      prix_max number(6,2);
  6      prix_pop number(6,2);
  7  
  8  
  9  
 10  BEGIN
 11  
 12  
 13  
 14     select codereseau 
 15     into reseau_le_pop 
 16     from(
 17      select codereseau 
 18      from 
 19      (
 20          SELECT codereseau, count(*)nb 
 21          FROM abonnement_reseau natural join joueur inner join reseau on abonnement_reseau.codereseau = reseau.code 
 22          where reseau.actif = 1 
 23          group by codereseau
 24      ) 
 25      ORDER BY nb desc) 
 26     where rownum = 1;
 27  
 28  
 29  
 30     select idPeriode 
 31     into periode_plus_utilise
 32     from (
 33      select idPeriode
 34      from (
 35          select idPeriode,count (*)  nb 
 36          from periode natural join periode_forfait_joueur natural join abonnement_reseau 
 37          where codereseau = reseau_le_pop group by idPeriode
 38          ) 
 39      order by nb desc
 40      )
 41  where ROWNUM = 1;
 42  
 43  
 44  --On cherche le prix max
 45  select prix into prix_max from (select prix from periode  order by prix desc) where ROWNUM =1; 
 46  
 47  -- On cherche le prix de la periode concerné
 48  select prix into prix_pop from periode where idPeriode = periode_plus_utilise;
 49  
 50  if prix_max > prix_pop then
 51          UPDATE PERIODE 
 52          SET PRIX = PRIX + 0.1*PRIX
 53          WHERE idPeriode = periode_plus_utilise;
 54  end if;
 55  
 56  select codeForfait,prix into code, nouveau_prix from periode where idPeriode = periode_plus_utilise;
 57  
 58  
 59  END AJUSTERPROMOTION;

Elément Procedure AJUSTERPROMOTION compilé

SQL> @procedures/suppressionJeu.sql
SQL> CREATE OR REPLACE PROCEDURE suppressionJeu(etat_sortie OUT INT, nom_du_jeu IN JEU.NOM%TYPE) AS 
  2  
  3      nb_jeux INT;
  4      id_jeu JEU.IDJEU%TYPE;
  5  
  6  BEGIN
  7  
  8      etat_sortie := 0;
  9      SELECT COUNT(*)
 10      INTO nb_jeux
 11      FROM JEU
 12      WHERE NOM = nom_du_jeu;
 13  
 14      IF nb_jeux = 0 THEN
 15          etat_sortie := 1;
 16      ELSIF nb_jeux > 1 THEN
 17          etat_sortie := 2;
 18      ELSE
 19  
 20          SELECT IDJEU
 21          INTO id_jeu
 22          FROM JEU
 23          WHERE NOM = nom_du_jeu;
 24  
 25          COMMIT;
 26          SET TRANSACTION NAME 'supressions';
 27              DELETE
 28              FROM SUCCES_EN_COURS
 29              WHERE IDSUCCES IN (SELECT IDSUCCES FROM SUCCES WHERE IDCONTENU IN (SELECT IDCONTENU FROM CONTENU WHERE IDJEU = id_jeu));
 30              DELETE
 31              FROM SUCCES_CALCULE
 32              WHERE IDSUCCES IN (SELECT IDSUCCES FROM SUCCES WHERE IDCONTENU IN (SELECT IDCONTENU FROM CONTENU WHERE IDJEU = id_jeu));
 33              DELETE
 34              FROM SUCCES_REALISE
 35              WHERE IDSUCCES IN (SELECT IDSUCCES FROM SUCCES WHERE IDCONTENU IN (SELECT IDCONTENU FROM CONTENU WHERE IDJEU = id_jeu));
 36              DELETE
 37              FROM SUCCES
 38              WHERE IDCONTENU IN (SELECT IDCONTENU FROM CONTENU WHERE IDJEU = id_jeu);
 39              DELETE
 40              FROM CONTENU
 41              WHERE IDJEU = id_jeu;
 42              DELETE
 43              FROM JEU
 44              WHERE NOM = nom_du_jeu;
 45          COMMIT;
 46  
 47      END IF;
 48  EXCEPTION
 49      WHEN OTHERS THEN
 50          etat_sortie := 3;
 51          ROLLBACK;
 52  END suppressionJeu;

Elément Procedure SUPPRESSIONJEU compilé

SQL> @scripts/creation_fonctions.sql
SQL> REM CREATION DES FONCTIONS
SQL> 
SQL> @fonctions/succesPlusRealise.sql
SQL> CREATE OR REPLACE FUNCTION succesPlusRealise RETURN VARCHAR2 AS 
  2  
  3      id_succes_plus_realise SUCCES.IDSUCCES%TYPE;
  4      succes_plus_realise SUCCES.TITRE%TYPE;
  5  
  6  BEGIN
  7  
  8      SELECT IDSUCCES
  9      INTO id_succes_plus_realise
 10      FROM (SELECT IDSUCCES, COUNT(*) as nb FROM SUCCES_REALISE GROUP BY IDSUCCES ORDER BY nb)
 11      WHERE rownum = 1;
 12  
 13      SELECT TITRE
 14      INTO succes_plus_realise
 15      FROM SUCCES
 16      WHERE IDSUCCES = id_succes_plus_realise;
 17  
 18      RETURN succes_plus_realise;
 19  
 20  END succesPlusRealise;

Elément Function SUCCESPLUSREALISE compilé

SQL> @fonctions/validerGenre.sql
SQL> CREATE OR REPLACE FUNCTION VALIDERGENRE(code_du_genre IN CHAR) RETURN CHAR AS 
  2  
  3  	code_parent GENRE.CODE%TYPE;
  4      code_a_retourner code_parent%TYPE;
  5  
  6  BEGIN 
  7  
  8  	SELECT CODEGENREPARENT
  9  	INTO code_parent
 10      FROM GENRE
 11      WHERE CODE = code_du_genre;
 12      IF code_parent = code_du_genre THEN
 13          code_a_retourner := code_du_genre;
 14      ELSE
 15          code_a_retourner := code_parent;
 16      END IF;
 17  
 18      --Si le genre est un genre parent, alors son code parent est lui-meme, donc on pourrait 
 19      --retourner directement le code parent, mais ce code suit precisement la consigne.
 20  
 21  	RETURN code_a_retourner;
 22  
 23  END VALIDERGENRE;

Elément Function VALIDERGENRE compilé

SQL> @fonctions/joueurLePlusPopulaire.sql
SQL> CREATE OR REPLACE FUNCTION joueurLePlusPopulaire RETURN VARCHAR2 AS
  2  
  3  	joueur_plus_populaire JOUEUR.SURNOM%TYPE;
  4  
  5  
  6  BEGIN
  7  
  8      select surnom 
  9      into joueur_plus_populaire
 10      from(
 11          select surnom
 12          from(
 13              select joueur.surnom, count(*)nb 
 14              from joueur natural join ami where actif = 1 and prenom is not null and  nom is not null and (joueur.nojoueur = ami.nojoueurinvitant or joueur.nojoueur = ami.nojoueurinvite) 
 15              group by joueur.surnom
 16              )
 17          order by nb desc)
 18      where rownum = 1;
 19  
 20  	RETURN joueur_plus_populaire;
 21  
 22  END joueurLePlusPopulaire;

Elément Function JOUEURLEPLUSPOPULAIRE compilé

SQL> @fonctions/jeuLePlusPopulaire.sql
SQL> CREATE OR REPLACE FUNCTION jeuLePlusPopulaire(code_esrb IN CHAR) RETURN VARCHAR2 AS
  2  
  3  	nom_jeu_plus_populaire JEU.NOM%TYPE;
  4  
  5  BEGIN
  6  	SELECT NOM
  7      INTO nom_jeu_plus_populaire
  8      FROM JEU
  9      WHERE IDJEU =
 10      (SELECT IDJEU
 11      FROM CONTENU
 12      WHERE IDCONTENU =
 13      (SELECT IDCONTENU
 14      FROM (SELECT IDCONTENU, COUNT(*) as nb
 15      FROM CONTENU_POSSEDE
 16      WHERE IDCONTENU IN (SELECT IDCONTENU FROM CONTENU WHERE IDJEU IN (SELECT IDJEU FROM JEU WHERE CODEESRB = code_esrb) AND TYPECONTENU = 'J')
 17      AND NOJOUEUR IN (SELECT NOJOUEUR FROM JOUEUR WHERE ACTIF = '1')
 18      AND NOJOUEUR IN (SELECT NOJOUEUR FROM SUCCES_REALISE WHERE IDCONTENU = IDCONTENU)
 19      GROUP BY IDCONTENU
 20      ORDER BY nb)
 21      WHERE rownum = 1));
 22  
 23  	RETURN nom_jeu_plus_populaire;
 24  
 25  END jeuLePlusPopulaire;

Elément Function JEULEPLUSPOPULAIRE compilé

SQL> @scripts/creation_vues.sql
SQL> REM CREATION DES VUES
SQL> 
SQL> @vues/mesSucces.sql

Erreur commençant à la ligne: 3 Fichier @ C:\Users\pinot\BD_JEUX\scripts\creation_vues.sql
Dans la commande -
@vues/mesSucces.sql
Rapport d'erreur -
SP2-0310 : impossible d'ouvrir le fichier : "vues/mesSucces.sql"
SQL> @vues/suivi.sql
SQL> CREATE VIEW suiviReseau AS
  2     SELECT MOMENT, ACTION, CODERESEAU, NOM FROM RESEAU  natural JOIN SUIVI_RESEAU 
  3     WHERE NOJOUEUR IS NULL
  4     ORDER BY MOMENT ASC;

View SUIVIRESEAU créé(e).

SQL> 
SQL> CREATE VIEW suiviReseauJoueur AS
  2     SELECT MOMENT, ACTION, CODERESEAU, SURNOM FROM JOUEUR  NATURAL JOIN SUIVI_RESEAU 
  3     WHERE NOJOUEUR IS NOT NULL
  4     ORDER BY MOMENT ASC;

View SUIVIRESEAUJOUEUR créé(e).

SQL> 
SQL> CREATE VIEW suiviAmitieInvitation AS
  2     SELECT S.MOMENT, J.SURNOM, J.NOJOUEUR, S.NOJOUEURINVITE, S.DATESUIVI, S.CODESTATUT FROM JOUEUR J INNER JOIN SUIVI_AMITIE S
  3     ON J.NOJOUEUR = S.NOJOUEURINVITANT;

Erreur commençant à la ligne: 11 Fichier @ C:\Users\pinot\BD_JEUX\scripts\vues\suivi.sql
Dans la commande -
CREATE VIEW suiviAmitieInvitation AS
   SELECT S.MOMENT, J.SURNOM, J.NOJOUEUR, S.NOJOUEURINVITE, S.DATESUIVI, S.CODESTATUT FROM JOUEUR J INNER JOIN SUIVI_AMITIE S
   ON J.NOJOUEUR = S.NOJOUEURINVITANT
Rapport d'erreur -
ORA-00955: ce nom d'objet existe déjà
00955. 00000 -  "name is already used by an existing object"
*Cause:    
*Action:
SQL> @creation_donnees.sql
SQL> REM CREATION DES DONNÉES
SQL> 
SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom)
  2  	VALUES ('bob@hotmail.com', 'BOB LE JOUEUR', NULL, 'Robert', 'Paquette');

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('fred@outlook.com', 'Fred Y', NULL, NULL, NULL, 0);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('roger@gmail.com', 'Roger la menace', NULL, 'Roger', 'Tremblay', 1);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('steve@hotmail.com', 'Steve le pirate', NULL, 'S', 'P', 1);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('sylvie@outlook.com', 'SILL VI', NULL, NULL, NULL, 1);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('barbie15@gmail.com', 'Tank Girl', NULL, 'Tank', NULL, 0);

1 ligne inséré.

SQL> 
SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('E', 'Enfants et adultes');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('T', 'Adolescents');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('M', 'Jeunes adultes');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('A', 'Adultes');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('R', 'En attente de classement');

1 ligne inséré.

SQL> 
SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('ACT', 'Action', 'ACT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('HOR', 'Horreur', 'HOR');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('SPT', 'Sport', 'SPT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('AVT', 'Aventure', 'ACT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('HCK', 'Hack and Slash', 'ACT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('SUR', 'Survie', 'HOR');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('COU', 'Course', 'SPT');

1 ligne inséré.

SQL> 
SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('TOMB RAIDER', 'Les aventures de Lara Croft', 'T', 'ACT');

1 ligne inséré.

SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('Dying Light', 'Survivre dans un monde infesté de zombie. Bonne nuit!', 'M', 'HOR');

1 ligne inséré.

SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('CANDY CRUSH', 'Le super jeu', 'T', 'HOR');

1 ligne inséré.

SQL> 
SQL> INSERT INTO SOUS_GENRE_JEU (CodeSousGenre, IdJeu)
  2  	VALUES ('AVT', 1);

1 ligne inséré.

SQL> INSERT INTO SOUS_GENRE_JEU (CodeSousGenre, IdJeu)
  2  	VALUES ('SUR', 2);

1 ligne inséré.

SQL> 
SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Les quêtes principales', 'Les aventures de Lara Croft en Amazonie', to_date('2018-02-03'), 'J', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('La quête secondaire du dragon', 'Les aventures de Lara Croft en Chine', to_date('2018-06-23'), 'D', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('La quête secondaire de l''aigle', 'Les aventures de Lara Croft dans les montagnes', to_date('2018-11-11'),'D', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Ensemble d''exploration', 'Équipements supplémentaires pour l''aventure', to_date('2018-12-01'), 'O', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Chicago', 'La ville infestée de Chicago', to_date('2018-09-09'), 'J', 2);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Niveau1', 'Les 10 premiers niveaux', to_date('2019-01-24'), 'J', 3);

1 ligne inséré.

SQL> 
SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (2, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (3, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (4, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 2);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (5, 2);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 3);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (2, 3);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (3, 3);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (4, 3);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Survivre', 'Vous avez réussi à traverser la foret amazonienne', 50, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Délivrance', 'Vous avez réussi à sauver Kevin', 10, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Tenace', 'Rependre le combat après une raclée', 10, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Rusé', 'Résoudre l''énigme du dragon', 20, 2);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Agile', 'Réussir un vol plané des hautes falaises', 20, 3);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Survivant', 'Survivre la première nuit dans la ville', 50, 5);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Mission_1', 'Vaincre le gros méchant zombie à la fin de la mission', 10, 5);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Herboriste', 'Recuperer des plantes médécinales', 5, 5);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Super bonbonnier', 'Reussir 5X un tableau en 10 secondes', 5, 6);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES_CALCULE (IdSucces, MaximumRequis)
  2  	VALUES (8, 10);

1 ligne inséré.

SQL> INSERT INTO SUCCES_CALCULE (IdSucces, MaximumRequis)
  2  	VALUES (9, 5);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 2);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 3);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 2, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (5, 2, 6);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES_EN_COURS (IdContenu, NoJoueur, IdSucces, Compteur)
  2  	VALUES (5, 2, 8, 7);

Erreur commençant à la ligne: 123 Fichier @ file:/C:/Users/pinot/BD_JEUX/creation_donnees.sql
Dans la commande -
INSERT INTO SUCCES_EN_COURS (IdContenu, NoJoueur, IdSucces, Compteur)
	VALUES (5, 2, 8, 7)
Erreur à la ligne de commande: 123 Colonne: 13 Fichier @ file:/C:/Users/pinot/BD_JEUX/creation_donnees.sql
Rapport d'erreur -
Erreur SQL : ORA-04098: Déclencheur  'ORA8TRD157_44.NOUVEAUSUCCESENCOURS_TRG' non valide. Echec de la revalidation
04098. 00000 -  "trigger '%s.%s' is invalid and failed re-validation"
*Cause:    A trigger was attempted to be retrieved for execution and was
           found to be invalid.  This also means that compilation/authorization
           failed for the trigger.
*Action:   Options are to resolve the compilation/authorization errors,
           disable the trigger, or drop the trigger.
SQL> 
SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('GOLD1', 'XBox Gold' , 'Abonnement pour jouer en ligne et avoir des promotions');

1 ligne inséré.

SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('PASS1', 'XBox Game Pass' , 'Abonnement pour 100 jeux par mois');

1 ligne inséré.

SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('STAND', NULL , NULL);

1 ligne inséré.

SQL> 
SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2019-01-11'), to_date('2019-12-31'), 80, 'GOLD1');

1 ligne inséré.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2018-01-11'), to_date('2018-12-31'), 90, 'GOLD1');

1 ligne inséré.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2019-06-11'), to_date('2019-10-31'), 50, 'PASS1');

1 ligne inséré.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2000-01-01'), to_date('2030-12-31'), 0, 'STAND');

1 ligne inséré.

SQL> 
SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 1, to_date('2019-06-06'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 2, to_date('2018-06-06'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 3, to_date('2019-10-06'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 4, to_date('2015-02-26'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (2, 1, to_date('2019-04-04'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (3, 1, to_date('2019-05-05'));

1 ligne inséré.

SQL> 
SQL> INSERT INTO RESEAU (Code, Nom, Description)
  2  	VALUES ('LACKEN', 'Les amis du Lac Kénogami', 'Bienvenue à tous!');

1 ligne inséré.

SQL> INSERT INTO RESEAU (Code, Nom, Description, Actif)
  2  	VALUES ('UQACBD', 'Le reseau des etudiants du 157', 'Tous les etudiants qui travaillent actuellement sur le PLSQL', 1);

1 ligne inséré.

SQL> INSERT INTO RESEAU (Code, Nom, Description, Actif)
  2  	VALUES ('FRANCO', 'Le reseau des francophones', 'Ici, pas de Bienvenue-Hi!', 0);

1 ligne inséré.

SQL> 
SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('LACKEN', 1);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 1);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 1);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 2);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 3);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 4);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 5);

1 ligne inséré.

SQL> 
SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('NOU', 'Nouveau ami');

1 ligne inséré.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('FIN', 'Fin de l''amitié');

1 ligne inséré.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('REL', 'Rel. distante seulement');

1 ligne inséré.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('PRO', 'Rel. professionnelle');

1 ligne inséré.

SQL> 
SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (1, 2, to_date('2019-06-08'), 'NOU');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (1, 6, to_date('2019-06-10'), 'FIN');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 3, to_date('2019-01-01'), 'NOU');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 4, to_date('2019-02-02'), 'NOU');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 5, to_date('2019-03-03'), 'PRO');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (6, 2, to_date('2019-04-04'), 'REL');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (3, 6, to_date('2019-06-04'), 'NOU');

1 ligne inséré.

SQL> 
SQL> spool off
